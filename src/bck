
import { Component } from '@angular/core';
import { AlertController, Platform } from '@ionic/angular';
//import { HTTP } from '@ionic-native/http/ngx'; //android only
import { Geolocation } from '@ionic-native/geolocation/ngx';
import {
  GoogleMaps,
  GoogleMap,
  GoogleMapsEvent,
  GoogleMapOptions,
  CameraPosition,
  MarkerOptions,
  Marker,
  Environment
} from '@ionic-native/google-maps';
import { HttpClient } from "@angular/common/http";
@Component({
  selector: 'app-home',
  templateUrl: 'home.page.html',
  styleUrls: ['home.page.scss'],
})
export class HomePage {
  public booking_detail: Object = {
    book_option: "book"
  }

  map: GoogleMap;

  constructor(public alertController: AlertController, private http: HttpClient, private geolocation: Geolocation, private platform: Platform) {

  }
  async ngOnInit() {
    await this.platform.ready();
    await this.getLocation();

  }
  loadMap(lat, lng) {

    // This code is necessary for browser
    // hk : error which environment is null, only works on deployed in production 
    Environment.setEnv({
      'API_KEY_FOR_BROWSER_RELEASE': 'AIzaSyCJ1tE4-pmU3OWF0OurpQxhlW4k_W8bSLM',
      'API_KEY_FOR_BROWSER_DEBUG': 'AIzaSyCJ1tE4-pmU3OWF0OurpQxhlW4k_W8bSLM'
    });
    //cordova


    let mapOptions: GoogleMapOptions = {
      camera: {
        target: {
          lat: lat,
          lng: lng
        },
        zoom: 18,
        tilt: 30
      }
    };
    console.log("map creating...");
    this.map = GoogleMaps.create('map_canvas', mapOptions);
    console.log("map created");
    // let marker: Marker = this.map.addMarkerSync({
    //   title: 'Your pick up point',
    //   icon: 'blue',
    //   animation: 'DROP',
    //   position: {
    //     lat: lat,
    //     lng: lng
    //   }
    // });

    // marker.on(GoogleMapsEvent.MARKER_CLICK).subscribe(() => {
    //   alert('clicked');
    // });
  }

  getLocation() {
    this.geolocation.getCurrentPosition().then((resp) => {
      this.loadMap(resp.coords.latitude,
        resp.coords.longitude);
    }).catch((error) => {
      console.log('Error getting location', error);
    });
  }

  updateBookOption(option) {

    const element = document.getElementById("datetime");
    if (element) {
      element.setAttribute("disabled", option === "book" ? "true" : "false");
      console.log(element);
    }

    this.booking_detail = {
      ...this.booking_detail,
      book_option: option
    }
  }

  async setPassengers() {
    const alert = await this.alertController.create({
      header: "How many going?",
      inputs: [
        {
          name: "passengers",
          type: "number",
        }
      ],
      buttons: [
        {
          text: "Set",
          handler: (e) => {
            this.updatePassenger(e.passengers);
          },

        }, {
          text: "Cancel",
          role: "cancel"
        }
      ]
    });
    await alert.present();
  }

  updatePassenger(count) {
    const passengerCountElement = document.getElementById("passenger_count");
    passengerCountElement.innerHTML = count;
    this.booking_detail = {
      ...this.booking_detail,
      passengers: count
    }
  }

  setPickupTime() {
    document.getElementById("datetime").click();
  }

  updatePickupTime(time) {
    this.booking_detail = {
      ...this.booking_detail,
      time: time
    }
  }

  calculateFare() {
    this.http.get('http://localhost:8000/route_estimation', {}).toPromise()
      .then(data => {
        console.log("khk", data);
      })
      .catch(error => {

        console.log(error.status);
        console.log(error.error); // error message as string
        console.log(error.headers);

      });
  }
}
